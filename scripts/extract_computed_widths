#!/usr/bin/env python3

'''
Extract computed widths from csv file
Copyright 2016, Holger Dell
Licensed under GPLv3.
'''

import os
import sys
import csv


def read_results(filename):
    """Read results from a csv file.

    Args:
        filename: The path of the csv file.
            Assumes the given file contains a header line, such as:
            mode;se_or_pa;number;solver;ver;instance;timeout;width;validation_result;exit_status;time_real; time_user;time_sys;time_perc;time_mem

    Returns:
        A list of dictionaries, one per row of the csv file.
    """
    results=list()
    with open(filename, 'r') as csvfile:
        reader = csv.DictReader(csvfile, delimiter=';', skipinitialspace=True)
        for row in reader:
            results.append(row)
    return results


def tw_from_results(results):
    """Store the best width found for each instance

    Args:
        results: A list of dictionaries; each dictionary requires the keys
            'mode', 'validation_result', 'width', and 'instance'

    Returns:
        A dictionary that maps each instance name to the best width found by any
        treewidth solver
    """
    tw=dict()
    for row in results:
        if row['mode'] == 'ex' and int(row['validation_result']) == 0:
            width=row['width']
            instance=row['instance']
            if (not instance in tw) \
            or tw[instance] == '' \
            or int(width) < int(tw[instance]):
                tw[instance] = width
    return tw


def print_tw_as_csv(tw, file=sys.stdout):
    """Print csv file of known_treewidths"""
    writer = csv.writer(file, delimiter=';', lineterminator='\n')
    writer.writerow(['name','treewidth+1'])
    for instance in sorted(tw):
        writer.writerow([instance,tw[instance]])


def print_solver_warnings(tw, results, file=sys.stderr):
    """Print warnings about bugs in exact solvers"""
    for row in results:

        width=row['width']
        instance=row['instance']

        if row['mode'] == 'ex' \
        and int(row['validation_result']) == 0 \
        and int(width) > int(tw[instance]):
            print("Warning: {:s}-{:s}-{:s}-{:s} produced width {:s} "
                  "but treewidth+1 is {:s} for {:s}".format(
                    row['mode'], row['se_or_pa'], row['number'],
                    row['solver'], row['width'], tw[instance], instance),
                  file=file)


def print_time_real(results, mode='ex'):
    """Print the real running time for each valid output of tw-exact"""
    for row in results:
        if row['mode'] == mode and int(row['validation_result']) == 0:
            print(row['time_real'] + ' ' + row['instance'])


def main():
    path=os.path.dirname(os.path.realpath(__file__))

    if len(sys.argv)!=2:
        print("Error: argument must be a results csv file generated by logs-to-csv")
        exit(1)

    results=read_results(sys.argv[1])
    tw=tw_from_results(results)
    print_tw_as_csv(tw)
    print_solver_warnings(tw,results)
#    print_time_real(results)


if __name__ == '__main__':
    main()

